Logger 		- 日志写出器 ，供程序员输出日志信息 
Appender 	- 日志目的地 ，把格式化好的日志信息输出到指定的地方去 
Layout 		- 日志格式化器 ，用来把程序员的 logging request 格式化成字符串

Log4j 基本使用方法 
　　 Log4j 由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式 。日志信息的优先级从高到低有 ERROR 、 WARN 、 INFO 、 DEBUG ，
分别用来指定这条日志信息的重要程度；日志信息的输出目的地指定了日志将打印到控制台还是文件中；而输出格式则控制了日志信息的显示内容。 
　 　 1 、定义配置文件 
　　    其实您也可以完全不使用配置文件，而是在代码中配置 Log4j 环境。但是，使用配置文件将使您的应用程序更加灵活。 Log4j 支持两种配置文件格式，一种是 XML格式的
文件，一种是 Java 特性文件（键 = 值 properties 文件）。下面我们介绍使用 Java特性文件做为配置文件的方法： 
　　 1) 配置根 Logger ，其语法为： 
　　 log4j.rootLogger = [ level ] , appenderName, appenderName, …
　　其中， level 是日志记录的优先级，分为 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 ALL 或者您定义的级别。 Log4j 建议只使用四个级别 ，优先级从
高到低分别是 ERROR 、 WARN 、 INFO 、 DEBUG 。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定 义了 INFO 级别，则应用程序
中所有 DEBUG 级别的日志信息将不被打印出来 。 appenderName 就是指 B日志信息输出到哪个地方。您可以同时指定多个输出目的地。

　　 2)配置日志信息输出目的地 Appender ，其语法为： 
　　 log4j.appender.appenderName = fully.qualified.name.of.appender.class. 其中， Log4j 提供的 appender 有以下几种： 
　　        1.org.apache.log4j.ConsoleAppender （控制台）， 
　　        2.org.apache.log4j.FileAppender （文件）， 
　　        3.org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）， 
　　        4.org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个    新的文件） 
　　        5.org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方）

　　 3)配置日志信息的格式（布局），其语法为： 
　　 log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
　　其中， Log4j 提供的 layout 有以 e 几种： 
　　        1.org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）， 
　　        2.org.apache.log4j.PatternLayout （可以灵活地指定布局模式）， 
　　        3.org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）， 
　　        4.org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息） 
　　 Log4J 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息，打印参数如下： %m 输出代码中指定的消息 
　　 %p 输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL
　　 %r 输出自应用启动到输出该 log 信息耗费的毫秒数 
　　 %c 输出所属的类目，通常就是所在类的全名 
　　 %t 输出产生该日志事件的线程名 
　　 %n 输出一个回车换行符， Windows 平台为 “rn” ， Unix 平台为 “n”
　　 %d 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS} ，输出类似： 2002 年 10 月 18 日 22 ： 10 ： 28 ， 921
　　 %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例： Testlog4.main(TestLog4.java:10)

2. 在代码中使用 Log4j 
　　 1) 得到记录器 
　　 使用 Log4j ，第一步就是获取日志记录器，这个记录器将负责控制日志信息。其语法为： 
　　 public static Logger getLogger( String name) 
　　 通过指定的名字获得记录器，如果必要的话，则为这个名字创建一个新的记录器。 Name 一般取本类的名字，比如： 
　　 static Logger logger = Logger.getLogger ( ServerWithLog4j.class.getName () ) 
　　 2)读取配置文件 
　　当获得了日志记录器之后，第二步将配置 Log4j 环境，其语法为： 
　　 BasicConfigurator.configure () ： 自动快速地使用缺省 Log4j 环境。 
　　 PropertyConfigurator.configure ( String configFilename) ：读取使用 Java 的特性文件编写的配置文件。 
　　 DOMConfigurator.configure ( String filename ) ：读取 XML 形式的配置文件。 
　 　 3)插入记录信息（格式化日志信息） 
　　当上两个必要步骤执行完毕，您就可以轻松地使用不同优先级别的日志记录语句插入到您想记录日志的任何地方，其语法如下： 
　　 Logger.debug( Object message ) ;
　　 Logger.info ( Object message ) ;
　　 Logger.warn ( Object message ) ;
　　 Logger.error( Object message ) ;  
3. 示例 2 ～示例 8
	【示例 2 】 输出为文本文件或 HTML 文件
	# 设置级别：   
	log4j.rootLogger=debug,appender1    
	log4j.appender.appender1=org.apache.log4j.FileAppender  
	# 设置文件输出路径   
	log4j.appender.appender1.File=c:/Log4JDemo02.html  
	# 设置文件输出样式   
	log4j.appender.appender1.layout=org.apache.log4j.HTMLLayout  
 
【 示例3 】 输出为文本文件或HTML 文件
	Properties 代码
	# 设置级别和多个目的地   
	log4j.rootLogger=debug,appender1,appender2    
	# 输出到控制台   
	log4j.appender.appender1=org.apache.log4j.ConsoleAppender  
	log4j.appender.appender1.layout=org.apache.log4j.TTCCLayout    
	# 输出到文件 ( 这里默认为追加方式 )  
	log4j.appender.appender2=org.apache.log4j.FileAppender  
	log4j.appender.appender2.File=c:/Log4JDemo02.html  
	log4j.appender.appender2.layout=org.apache.log4j.HTMLLayout   
 
【 示例 4 】 SimpleLayout 样式
	Properties 代码
	# 设置级别和目的地   
	log4j.rootLogger=debug,appender1    
	# 输出到控制台   
	log4j.appender.appender1=org.apache.log4j.ConsoleAppender  
	# 设置输出样式   
	log4j.appender.appender1.layout=org.apache.log4j.SimpleLayout  
	控制台代码
               DEBUG - This is debug message.
               INFO  - This is info message.
               ERROR - This is error message.
 
	【示例5 】 自定义样式
	Java 代码
	# 设置级别和目的地   
	log4j.rootLogger=debug,appender1    
	# 输出到控制台   
	log4j.appender.appender1=org.apache.log4j.ConsoleAppender  
	# 设置输出样式   
	log4j.appender.appender1.layout=org.apache.log4j.PatternLayout  
	# 自定义样式   
	log4j.appender.appender1.layout.ConversionPattern =%r [%t] [%p] - %c -%l -%m%n  
	# 自定义样式
	# %r 时间 0
	# %t 方法名 main
	# %p 优先级 DEBUG/INFO/ERROR
	# %c 所属类的全名 ( 包括包名 )
	# %l 发生的位置，在某个类的某行
	# %m 输出代码中指定的讯息，如 log(message) 中的 message
	# %n 输出一个换行
	log4j.appender.appender1.layout.ConversionPattern =%r [%t] [%p] - %c -%l -%m%n 输出结果：
	控制台代码
	0 [main] [DEBUG] - com.coderdream.log4j.HelloLog4j
	-com.coderdream.log4j.HelloLog4j.main(HelloLog4j.java:16 ) -This is debug message.
	31 [main] [INFO] - com.coderdream.log4j.HelloLog4j -com.coderdream.log4j.HelloLog4j.main(HelloLog4j.java:18 ) -This is info message.
	31 [main] [ERROR] - com.coderdream.log4j.HelloLog4j
	-com.coderdream.log4j.HelloLog4j.main(HelloLog4j.java:20 ) -This is error message.
 
【示例6 】 多目的地、自定义样式
	Properties 代码
	# 设置级别和目的地   
	log4j.rootLogger=debug,appender1,appender2    
	# 输出到控制台   
	log4j.appender.appender1=org.apache.log4j.ConsoleAppender  
	# 设置输出样式   
	log4j.appender.appender1.layout=org.apache.log4j.PatternLayout  
	log4j.appender.appender1.layout.ConversionPattern=[%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m%n  
	# 输出到文件 ( 这里默认为追加方式 )  
	log4j.appender.appender2=org.apache.log4j.FileAppender  
	# 设置文件输出路径   
	log4j.appender.appender2.File=c:/Log4JDemo06.log  
	# 设置文件输出样式   
	log4j.appender.appender2.layout=org.apache.log4j.PatternLayout  
	log4j.appender.appender2.layout.ConversionPattern=[%d{HH:mm:ss:SSS}][%C-%M] -%m%n  
	【示例 7 】 【企业应用】设置 特定包的级别和目的地
	先增加一个包，新建一个类：
	Java 代码
	package com.coderdream.log4jDao;    
	import org.apache.log4j.Logger;    
	public class HelloDao {  
    	private static Logger logger = Logger.getLogger(HelloDao.class);  
    	public static void main(String[] args) {  
       	 	//  记录 debug 级别的信息   
        	logger.debug("This is debug message from Dao.");  
        	//  记录 info 级别的信息   
        	logger.info("This is info message from Dao.");  
        	//  记录 error 级别的信息   
        	logger.error("This is error message from Dao.");  
    	}  
	}  
      如果这个类作为基类，如 J2EE 中的 BaseDao 、 BaseAction 、 BaseService 等等，则我们可以将各层的日志信息分类输出到各个文件。
Properties 代码
# 省略根，只设置特定包的级别和目的地    
log4j.logger.com.coderdream.log4j =debug,appender1  
log4j.logger.com.coderdream.log4jDao =info,appender1,appender2    
# 输出到控制台   
log4j.appender.appender1=org.apache.log4j.ConsoleAppender  
log4j.appender.appender1.layout=org.apache.log4j.PatternLayout  
log4j.appender.appender1.layout.ConversionPattern =[%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m%n  
# 输出到文件 ( 这里默认为追加方式 )  
log4j.appender.appender2=org.apache.log4j.FileAppender  
log4j.appender.appender2.File=c:/Log4JDemo07_Dao.log  
 log4j.appender.appender2.layout=org.apache.log4j.PatternLayout  
log4j.appender.appender2.layout.ConversionPattern=[%d{HH:mm:ss:SSS}][%C-%M] -%m%n   

特别说明：
为了提高效率，我们可以在写日志前增加判断：
Java 代码
//  记录 debug 级别的信息   
if (logger.isDebugEnabled ()) {  
    logger.debug("This is debug message from Dao.");  
}    
//  记录 info 级别的信息   
if (logger.isInfoEnabled ()) {  
    logger.info("This is info message from Dao.");  
}    
//  记录 error 级别的信息   
logger.error("This is error message from Dao.");  
 
 
另附一些详细东西：
1.java 中的应用
　            Logger.debug(Object message);// 调试信息 
　　        Logger.info(Object message);// 一般信息 
　　        Logger.warn(Object message);// 警告信息 
　　        Logger.error(Object message);// 错误信息 
　　        Logger.fatal(Object message);// 致命错误信息
2 、配置根 Logger ，其语法为： 
　　 log4j.rootLogger = [ level ] , appenderName1, appenderName2, …
         level : 是日志记录的优先级，分为 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 ALL 或者您定义的级别。 Log4j 建议只使用四个级别，优 先级从高到低分别是 ERROR 、 WARN 、 INFO 、 DEBUG 。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定 义了 INFO 级别，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。 
　　      appenderName: 就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。 
   例如： log4j.rootLogger ＝ info,A1,B2,C3 　　 
　　 3 、配置日志信息输出目的地，其语法为： 
　　   log4j.appender.appenderName = fully.qualified.name.of.appender.class  //
　　   "fully.qualified.name.of.appender.class" 可以指定下面五个目的地中的一个： 
          1.org.apache.log4j.ConsoleAppender （控制台） 
          2.org.apache.log4j.FileAppender （文件） 
          3.org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件） 
          4.org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件） 
          5.org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方） 
             1.ConsoleAppender 选项 
                    Threshold=WARN: 指定日志消息的输出最低层次。 
                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
                    Target=System.err ：默认情况下是： System.out, 指定输出控制台 
              2.FileAppender 选项 
                    Threshold=WARN: 指定日志消息的输出最低层次。 
                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
            3.DailyRollingFileAppender 选项 
                    Threshold=WARN: 指定日志消息的输出最低层次。 
                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
                    DatePattern='.'yyyy-ww: 每周滚动一次文件 ，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下： 
                    1)'.'yyyy-MM: 每月 
                    2)'.'yyyy-ww: 每周  
                    3)'.'yyyy-MM-dd: 每天 
                    4)'.'yyyy-MM-dd-a: 每天两次 
                    5)'.'yyyy-MM-dd-HH: 每小时 
                    6)'.'yyyy-MM-dd-HH-mm: 每分钟 
            4.RollingFileAppender 选项 
                    Threshold=WARN: 指定日志消息的输出最低层次。 
                    ImmediateFlush=true: 默认值是 true, 意谓着所有的消息都会被立即输出。 
                    File=mylog.txt: 指定消息输出到 mylog.txt 文件。 
                    Append=false: 默认值是 true, 即将消息增加到指定文件中， false 指将消息覆盖指定的文件内容。 
                    MaxFileSize=100KB: 后缀可以是 KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到 mylog.log.1 文件。 
                    MaxBackupIndex=2: 指定可以产生的滚动文件的最大数。
实际应用： 
　　 log4j.appender.A1=org.apache.log4j.ConsoleAppender // 这里指定了日志输出的第一个位置 A1 是控制台 ConsoleAppender 　　 
　　 3 、配置日志信息的格式，其语法为： 
　　 A. log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
              "fully.qualified.name.of.layout.class" 可以指定下面 4 个格式中的一个： 
               1.org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）， 
　　        2.org.apache.log4j.PatternLayout （可以灵活地指定布局模式）， 
　　        3.org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）， 
　　        4.org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息） 
                   1.HTMLLayout 选项 
                      LocationInfo=true: 默认值是 false, 输出 java 文件名称和行号 
                      Title=my app file: 默认值是 Log4J Log Messages.
                   2.PatternLayout 选项 
                      ConversionPattern=%m%n : 指定怎样格式化指定的消息。 
                   3.XMLLayout  选项 
                      LocationInfo=true: 默认值是 false, 输出 java 文件和行号 
   实际应用： 
   　　 log4j.appender.A1.layout=org.apache.log4j.PatternLayout
         log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n
           这里需要说明的就是日志信息格式中几个符号所代表的含义： 
　　          － X 号 : X 信息输出时左对齐； 
                   %p: 输出日志信息优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL,
                   %d: 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS} ，输出类似： 2002 年 10 月 18 日 22 ： 10 ： 28 ， 921
                   %r: 输出自应用启动到输出该 log 信息耗费的毫秒数 
                   %c: 输出日志信息所属的类目，通常就是所在类的全名 
                   
                   %t: 输出产生该日志事件的线程名 
                   %l: 输出日志事件的发生位置，相当于 %C.%M(%F:%L) 的组合 , 包括类目名、发生的线程，以及在代码中的行数。举例： Testlog4.main(TestLog4.java:10)
                   %x: 输出和当前线程相关联的 NDC( 嵌套诊断环境 ), 尤其用到像 java servlets 这样的多客户多线程的应用中。 
                   %%: 输出一个 "%" 字符 
                   %F: 输出日志消息产生时所在的文件名称 
                   %L: 输出代码中的行号 
                   %m: 输出代码中指定的消息 , 产生的日志具体信息 
                   %n: 输出一个回车换行符， Windows 平台为 "/r/n" ， Unix 平台为 "/n" 输出日志信息换行 
            可以在 % 与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如： 
                     1)%20c ：指定输出 category 的名称，最小的宽度是 20 ，如果 category 的名称小于 20 的话，默认的情况下右对齐。 
                     2)%-20c: 指定输出 category 的名称，最小的宽度是 20 ，如果 category 的名称小于 20 的话， "-" 号指定左对齐。 
                     3)%.30c: 指定输出 category 的名称，最大的宽度是 30 ，如果 category 的名称大于 30 的话，就会将左边多出的字符截掉，但小于 30 的话也不会有空格。 
                     4)%20.30c: 如果 category 的名称小于 20 就补空格，并且右对齐，如果其名称长于 30 字符，就从左边交远销出的字符截掉。
　　这里上面三个步骤是对前面 Log4j 组件说明的一个简化；下面给出一个具体配置例子，在程序中可以参照执行： 
　　 log4j.rootLogger=INFO,A1 ， B2
　　 log4j.appender.A1=org.apache.log4j.ConsoleAppender
　　 log4j.appender.A1.layout=org.apache.log4j.PatternLayout
　　 log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n
  　　  
      4. # 当输出信息于回滚文件时
           log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender   // 指定以文件的方式输出日志 
           log4j.appender.ROLLING_FILE.Threshold=ERROR 
           log4j.appender.ROLLING_FILE.File=rolling.log  // 文件位置 , 也可以用变量 ${java.home} 、 rolling.log
           log4j.appender.ROLLING_FILE.Append=true 
           log4j.appender.ROLLING_FILE.MaxFileSize=10KB  // 文件最大尺寸 
           log4j.appender.ROLLING_FILE.MaxBackupIndex=1  // 备份数 
           log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
           log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n  　　
 
  5. Log4j 比较全面的配置
 LOG4J 的配置之简单使它遍及于越来越多的应用中了： Log4J 配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。择其一二使用就够用了，
 log4j.rootLogger=DEBUG,CONSOLE,A1,im 
 log4j.addivity.org.apache=true
 # 应用于控制台
 log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender 
 log4j.appender.Threshold=DEBUG 
 log4j.appender.CONSOLE.Target=System.out 
 log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
 log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
 #log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n
 # 应用于文件
 log4j.appender.FILE=org.apache.log4j.FileAppender 
 log4j.appender.FILE.File=file.log 
 log4j.appender.FILE.Append=false 
 log4j.appender.FILE.layout=org.apache.log4j.PatternLayout 
 log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
 # Use this layout for LogFactor 5 analysis
 # 应用于文件回滚
 log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender 
 log4j.appender.ROLLING_FILE.Threshold=ERROR 
 log4j.appender.ROLLING_FILE.File=rolling.log  // 文件位置 , 也可以用变量 ${java.home} 、 rolling.log
 log4j.appender.ROLLING_FILE.Append=true       //true: 添加   false: 覆盖 
 log4j.appender.ROLLING_FILE.MaxFileSize=10KB   // 文件最大尺寸 
 log4j.appender.ROLLING_FILE.MaxBackupIndex=1  // 备份数 
 log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
 log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
 # 应用于 socket 
 log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender 
 log4j.appender.SOCKET.RemoteHost=localhost 
 log4j.appender.SOCKET.Port=5001 
 log4j.appender.SOCKET.LocationInfo=true 
 # Set up for Log Facter 5 
 log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout 
 log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n 
 # Log Factor 5 Appender 
 log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender 
 log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000
 # 发送日志给邮件
 log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender 
 log4j.appender.MAIL.Threshold=FATAL 
 log4j.appender.MAIL.BufferSize=10 
 www.wuset.com ">log4j.appender.MAIL.From=web@www.wuset.com 
 log4j.appender.MAIL.SMTPHost=www.wusetu.com 
 log4j.appender.MAIL.Subject=Log4J Message 
 www.wusetu.com ">log4j.appender.MAIL.To=web@www.wusetu.com 
 log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout 
 log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
 # 用于数据库 
 log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender 
 log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test 
 log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver 
 log4j.appender.DATABASE.user=root 
 log4j.appender.DATABASE.password= 
 log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n') 
 log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout 
 log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n

 log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender 
 log4j.appender.A1.File=SampleMessages.log4j 
 log4j.appender.A1.DatePattern=yyyyMMdd-HH'.log4j' 
 log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout
 # 自定义 Appender
 log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender
 log4j.appender.im.host = mail.cybercorlin.net 
 log4j.appender.im.username = username 
 log4j.appender.im.password = password 
 log4j.appender.im.recipient = corlin@cybercorlin.net
 log4j.appender.im.layout=org.apache.log4j.PatternLayout 
 log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
 
 
 
 一.参数意义说明
输出级别的种类
ERROR、WARN、INFO、DEBUG
ERROR 为严重错误 主要是程序的错误
WARN 为一般警告，比如session丢失
INFO 为一般要显示的信息，比如登录登出
DEBUG 为程序的调试信息
配置日志信息输出目的地
log4j.appender.appenderName = fully.qualified.name.of.appender.class
1.org.apache.log4j.ConsoleAppender（控制台）
2.org.apache.log4j.FileAppender（文件）
3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
配置日志信息的格式
log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
1.org.apache.log4j.HTMLLayout（以HTML表格形式布局），
2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
3.org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
4.org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
控制台选项
Threshold=DEBUG:指定日志消息的输出最低层次。
ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
Target=System.err：默认情况下是：System.out,指定输出控制台
FileAppender 选项
Threshold=DEBUF:指定日志消息的输出最低层次。
ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
File=mylog.txt:指定消息输出到mylog.txt文件。
Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
RollingFileAppender 选项
Threshold=DEBUG:指定日志消息的输出最低层次。
ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
File=mylog.txt:指定消息输出到mylog.txt文件。
Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
MaxBackupIndex=2:指定可以产生的滚动文件的最大数。
log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d{yyyy-MM-dd HH:mm:ssS} %c %m%n
日志信息格式中几个符号所代表的含义：
-X号: X信息输出时左对齐；
%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
%r: 输出自应用启动到输出该log信息耗费的毫秒数
%c: 输出日志信息所属的类目，通常就是所在类的全名
%t: 输出产生该日志事件的线程名
%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.Java:10)
%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像Java servlets这样的多客户多线程的应用中。
%%: 输出一个"%"字符
%F: 输出日志消息产生时所在的文件名称
%L: 输出代码中的行号
%m: 输出代码中指定的消息,产生的日志具体信息
%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
二.文件配置Sample1
log4j.rootLogger=DEBUG,A1,R
#log4j.rootLogger=INFO,A1,R
# ConsoleAppender 输出
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n
# File 输出 一天一个文件,输出路径可以定制,一般在根路径下
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
log4j.appender.R.File=blog_log.txt
log4j.appender.R.MaxFileSize=500KB
log4j.appender.R.MaxBackupIndex=10
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c] [%p] - %m%n
文件配置Sample2
下面给出的Log4J配置文件实现了输出到控制台，文件，回滚文件，发送日志邮件，输出到数据库日志表，自定义标签等全套功能。
log4j.rootLogger=DEBUG,CONSOLE,A1,im 
#DEBUG,CONSOLE,FILE,ROLLING_FILE,MAIL,DATABASE
log4j.addivity.org.apache=true
################### 
# Console Appender 
################### 
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender 
log4j.appender.Threshold=DEBUG 
log4j.appender.CONSOLE.Target=System.out 
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n
##################### 
# File Appender 
##################### 
log4j.appender.FILE=org.apache.log4j.FileAppender 
log4j.appender.FILE.File=file.log 
log4j.appender.FILE.Append=false 
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
# Use this layout for LogFactor 5 analysis
######################## 
# Rolling File 
######################## 
log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender 
log4j.appender.ROLLING_FILE.Threshold=ERROR 
log4j.appender.ROLLING_FILE.File=rolling.log 
log4j.appender.ROLLING_FILE.Append=true 
log4j.appender.ROLLING_FILE.MaxFileSize=10KB 
log4j.appender.ROLLING_FILE.MaxBackupIndex=1 
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
#################### 
# Socket Appender 
#################### 
log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender 
log4j.appender.SOCKET.RemoteHost=localhost 
log4j.appender.SOCKET.Port=5001 
log4j.appender.SOCKET.LocationInfo=true 
# Set up for Log Facter 5 
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout 
log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n
######################## 
# Log Factor 5 Appender 
######################## 
log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender 
log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000
######################## 
# SMTP Appender 
####################### 
log4j.appender.MAIL=org.apache.log4j.NET.SMTPAppender 
log4j.appender.MAIL.Threshold=FATAL 
log4j.appender.MAIL.BufferSize=10 
log4j.appender.MAIL.From=chenyl@yeqiangwei.com
log4j.appender.MAIL.SMTPHost=mail.hollycrm.com 
log4j.appender.MAIL.Subject=Log4J Message 
log4j.appender.MAIL.To=chenyl@yeqiangwei.com
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout 
log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
######################## 
# JDBC Appender 
####################### 
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender 
log4j.appender.DATABASE.URL=jdbc:MySQL://localhost:3306/test 
log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver 
log4j.appender.DATABASE.user=root 
log4j.appender.DATABASE.password= 
log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n') 
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout 
log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender 
log4j.appender.A1.File=SampleMessages.log4j 
log4j.appender.A1.DatePattern=yyyyMMdd-HH'.log4j' 
log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout
################### 
#自定义Appender 
################### 
log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender
log4j.appender.im.host = mail.cybercorlin.net 
log4j.appender.im.username = username 
log4j.appender.im.password = password 
log4j.appender.im.recipient = corlin@yeqiangwei.com
log4j.appender.im.layout=org.apache.log4j.PatternLayout 
log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
三.高级使用
实验目的：
1.把FATAL级错误写入2000NT日志
2. WARN，ERROR，FATAL级错误发送email通知管理员
3.其他级别的错误直接在后台输出
实验步骤：
输出到2000NT日志
1.把Log4j压缩包里的NTEventLogAppender.dll拷到WINNT\SYSTEM32目录下
2.写配置文件log4j.properties
# 在2000系统日志输出
log4j.logger.NTlog=FATAL, A8
# APPENDER A8
log4j.appender.A8=org.apache.log4j.nt.NTEventLogAppender
log4j.appender.A8.Source=JavaTest
log4j.appender.A8.layout=org.apache.log4j.PatternLayout
log4j.appender.A8.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
3.调用代码：
Logger logger2 = Logger.getLogger("NTlog"); //要和配置文件中设置的名字相同
logger2.debug("debug!!!");
logger2.info("info!!!");
logger2.warn("warn!!!");
logger2.error("error!!!");
//只有这个错误才会写入2000日志
logger2.fatal("fatal!!!");
发送email通知管理员：
1. 首先下载JavaMail和JAF, 
  http://java.sun.com/j2ee/ja/javamail/index.html
  http://java.sun.com/beans/glasgow/jaf.html
在项目中引用mail.jar和activation.jar。
2. 写配置文件
# 将日志发送到email
log4j.logger.MailLog=WARN,A5
#  APPENDER A5
log4j.appender.A5=org.apache.log4j.net.SMTPAppender
log4j.appender.A5.BufferSize=5
log4j.appender.A5.To=chunjie@yeqiangwei.com
log4j.appender.A5.From=error@yeqiangwei.com
log4j.appender.A5.Subject=ErrorLog
log4j.appender.A5.SMTPHost=smtp.263.net
log4j.appender.A5.layout=org.apache.log4j.PatternLayout
log4j.appender.A5.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
3.调用代码：
//把日志发送到mail
Logger logger3 = Logger.getLogger("MailLog");
logger3.warn("warn!!!");
logger3.error("error!!!");
logger3.fatal("fatal!!!");
在后台输出所有类别的错误：
1. 写配置文件
# 在后台输出
log4j.logger.console=DEBUG, A1
# APPENDER A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
2．调用代码
Logger logger1 = Logger.getLogger("console");
logger1.debug("debug!!!");
logger1.info("info!!!");
logger1.warn("warn!!!");
logger1.error("error!!!");
logger1.fatal("fatal!!!");
--------------------------------------------------------------------
全部配置文件：log4j.properties
# 在后台输出
log4j.logger.console=DEBUG, A1
# APPENDER A1
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
# 在2000系统日志输出
log4j.logger.NTlog=FATAL, A8
# APPENDER A8
log4j.appender.A8=org.apache.log4j.nt.NTEventLogAppender
log4j.appender.A8.Source=JavaTest
log4j.appender.A8.layout=org.apache.log4j.PatternLayout
log4j.appender.A8.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
# 将日志发送到email
log4j.logger.MailLog=WARN,A5
#  APPENDER A5
log4j.appender.A5=org.apache.log4j.net.SMTPAppender
log4j.appender.A5.BufferSize=5
log4j.appender.A5.To=chunjie@yeqiangwei.com
log4j.appender.A5.From=error@yeqiangwei.com
log4j.appender.A5.Subject=ErrorLog
log4j.appender.A5.SMTPHost=smtp.263.net
log4j.appender.A5.layout=org.apache.log4j.PatternLayout
log4j.appender.A5.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
全部代码：Log4jTest.java
  
/* 
  * 创建日期 2003-11-13 
  */ 
package edu.bcu.Bean; 
import org.apache.log4j.*; 
//import org.apache.log4j.nt.*; 
//import org.apache.log4j.net.*; 
/** 
  * @author yanxu 
  */ 
public class Log4jTest 
{ 
  public static void main(String args[]) 
  { 
   PropertyConfigurator.configure("log4j.properties"); 
   //在后台输出 
   Logger logger1 = Logger.getLogger("console"); 
   logger1.debug("debug!!!"); 
   logger1.info("info!!!"); 
   logger1.warn("warn!!!"); 
   logger1.error("error!!!"); 
   logger1.fatal("fatal!!!");
//在NT系统日志输出 
   Logger logger2 = Logger.getLogger("NTlog"); 
   //NTEventLogAppender nla = new NTEventLogAppender(); 
   logger2.debug("debug!!!"); 
   logger2.info("info!!!"); 
   logger2.warn("warn!!!"); 
   logger2.error("error!!!"); 
   //只有这个错误才会写入2000日志 
   logger2.fatal("fatal!!!");
//把日志发送到mail 
   Logger logger3 = Logger.getLogger("MailLog"); 
   //SMTPAppender sa = new SMTPAppender(); 
   logger3.warn("warn!!!"); 
   logger3.error("error!!!"); 
   logger3.fatal("fatal!!!"); 
  } 
}